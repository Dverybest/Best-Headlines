{"version":3,"sources":["components/NavBar.js","components/Articles.js","components/Home.js","components/Footer.js","components/Sports.js","components/Technology.js","components/Health.js","components/Entertainment.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","className","style","background","to","type","data-toggle","data-target","id","Articles","url","header","useState","articles","setArticles","isLoading","setIsLoading","useEffect","axios","get","then","res","console","log","data","catch","err","finally","articlesList","length","map","article","index","key","src","urlToImage","alt","target","href","title","description","Date","publishedAt","dotevn","config","Home","Footer","getFullYear","Sports","Technology","Health","Entertainment","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.308a18aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link, withRouter } from 'react-router-dom';\r\n\r\nconst NavBar = () => {\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navb mx-0\" style={{background:'#6d0000'}}>\r\n            <div>\r\n                <Link to='/Best-Headlines' className=\"navbar-brand\">Best-Headlines</Link>\r\n            </div>\r\n            {/* <!-- Toggler/collapsibe Button --> */}\r\n            <button  className=\"navbar-toggler navbar-dark\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\r\n                <span  className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            \r\n            <div  className=\"collapse navbar-collapse justify-content-end\" id=\"collapsibleNavbar\">\r\n            <ul  className=\"navbar-nav\">\r\n                <li  className=\"nav-item\">\r\n                    <Link to='/Best-Headlines' className=\"nav-link\">Home</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to='/Best-Headlines/sports' className=\"nav-link\">Sports</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to='/Best-Headlines/technology'  className=\"nav-link\">Technology</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to='/Best-Headlines/entertainment' className=\"nav-link\">Entertainment</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to='/Best-Headlines/health'  className=\"nav-link\">Health</Link>\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default withRouter(NavBar);","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nconst Articles = ({url,header}) => {\r\n\r\n    const [articles, setArticles] = useState([]);\r\n    const [isLoading,setIsLoading] = useState(true);\r\n    const fectchData = () => {\r\n        axios.get(url)\r\n            .then(res => {\r\n                console.log('done')\r\n                setArticles(res.data.articles)\r\n            })\r\n            .catch(err => {\r\n               // console.log(err)\r\n            })\r\n            .finally(()=>{\r\n                setIsLoading(false)\r\n            })\r\n    }\r\n    useEffect(() => {\r\n        fectchData();\r\n    })\r\n\r\n    const articlesList = articles.length!==0 ? (\r\n        articles.map((article, index) => {\r\n            return (\r\n                <div className=\"post card mx-1\" key={index}>\r\n                    {/* <img src={Pokeball} alt=\"A pokaball\" /> */}\r\n                    <div className=\"card-body row align-items-center\">\r\n                        {/* <Link to={`/${index}`}> */}\r\n                        <div className=\"col-sm-3 justify-content-center align-items-center\">\r\n                            <img src={article.urlToImage} className=\"rounded\" alt=\"news\"/>\r\n                            </div>\r\n                        <div className=\"col-sm-9\">\r\n                            <a target='blank' href={article.url}><h5 className=\"card-title\">{article.title}</h5></a>\r\n                            <p className=\"card-text\">{article.description}</p>\r\n                            <p>{`${new Date(article.publishedAt)}`}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <div><p>No Headlines yet</p></div>\r\n    )\r\n\r\n    return (\r\n        <div >\r\n            <h2 className=\"text-center articles\">{header}</h2>\r\n            {\r\n                isLoading?(\r\n                    <div className=\"container px-0\">\r\n                        <div className=\"row px-0 mx-0 align-items-center justify-content-center\">\r\n\r\n                        <div className=\"spinner-border text-primary\"></div>\r\n                        </div>\r\n                    </div>\r\n                ):(\r\n\r\n                    articlesList\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Articles;","import React from 'react';\r\nimport Articles from './Articles'\r\nimport dotevn from 'dotenv'\r\ndotevn.config()\r\nconst Home = () => {\r\n//if purposely remove api key\r\n    return (\r\n        <Articles\r\n            url={\"https://newsapi.org/v2/top-headlines?country=ng&apiKey=\" + process.env.REACT_APP_API_KEY}\r\n            header={\"General Headlines\"}\r\n        />\r\n    )\r\n}\r\nexport default Home;","import React from 'react'\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <footer className=\"text-center d-flex justify-content-center align-items-center\">\r\n            <p className=\"text-center my-0\">  Â© {new Date().getFullYear()} Copyright - \r\n                <a target=\"blank\" href=\"http://dverybest.dx.am/\">DveryBest</a>\r\n            </p>\r\n        </footer>\r\n    )\r\n}\r\nexport default Footer;","import React from 'react';\r\nimport Articles from './Articles'\r\nconst Sports = () => {\r\n//if purposely remove api key\r\n    return (\r\n        <Articles\r\n            url={\"https://newsapi.org/v2/top-headlines?country=ng&category=sports&apiKey=\"+ process.env.REACT_APP_API_KEY}\r\n            header={\"Sports Headlines\"}\r\n        />\r\n    )\r\n}\r\nexport default Sports;\r\n","import React from 'react';\r\nimport Articles from './Articles'\r\nconst Technology = () => {\r\n   \r\n    return (\r\n        <Articles\r\n            url={\"https://newsapi.org/v2/top-headlines?country=ng&category=technology&apiKey=\" + process.env.REACT_APP_API_KEY}\r\n            header={\"Technology Headlines\"}\r\n        />\r\n    )\r\n}\r\nexport default Technology;\r\n","import React from 'react';\r\nimport Articles from './Articles'\r\nconst Health = () => {\r\n//if purposely remove api key\r\n    return (\r\n        <Articles\r\n            url={\"https://newsapi.org/v2/top-headlines?country=ng&category=health&apiKey=\" + process.env.REACT_APP_API_KEY}\r\n            header={\"Health Headlines\"}\r\n        />\r\n    )\r\n}\r\nexport default Health;\r\n","import React from 'react';\r\nimport Articles from './Articles'\r\nconst Entertainment = () => {\r\n//if purposely remove api key\r\n    return (\r\n        <Articles\r\n            url={\"https://newsapi.org/v2/top-headlines?country=ng&category=entertainment&apiKey=\" + process.env.REACT_APP_API_KEY}\r\n            header={\"Entertainment Headlines\"}\r\n        />\r\n    )\r\n}\r\nexport default Entertainment;\r\n","import React from 'react';\r\nimport NavBar from './components/NavBar';\r\nimport Home from './components/Home';\r\nimport Footer from './components/Footer'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\n// import NewsCategory from './components/NewsCategory';\r\nimport Sports from './components/Sports';\r\nimport Technology from './components/Technology';\r\nimport Health from './components/Health';\r\nimport Entertainment from './components/Entertainment';\r\nimport dotevn from 'dotenv'\r\ndotevn.config()\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div>\r\n        <NavBar />\r\n        <div className=\"container px-0\">\r\n          <Switch>\r\n            <Route exact path='/Best-Headlines' component={Home} />\r\n            <Route path='/Best-Headlines/sports' component={Sports} />\r\n            <Route path='/Best-Headlines/technology' component={Technology} />\r\n            <Route path='/Best-Headlines/health' component={Health} />\r\n            <Route path='/Best-Headlines/entertainment' component={Entertainment} />\r\n            {/* <Route path='/:category' component={NewsCategory}/> */}\r\n          </Switch>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}